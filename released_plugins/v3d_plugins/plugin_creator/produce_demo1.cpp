#include <iostream>
#include <string>
#include <fstream>

using namespace std;

void produce_demo1(string dir, string vaa3d_path)
{
	ofstream ofs;
	string filename;

	filename = dir + "/demo1.pro";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<""<<endl;
	ofs<<"TEMPLATE	= lib"<<endl;
	ofs<<"CONFIG	+= qt plugin warn_off"<<endl;
	ofs<<"#CONFIG	+= x86_64"<<endl;
	ofs<<"VAA3DPATH = "<<vaa3d_path<<endl;
	ofs<<"INCLUDEPATH	+= $$VAA3DPATH/v3d_main/basic_c_fun"<<endl;
	ofs<<""<<endl;
	ofs<<"HEADERS	+= demo1_plugin.h"<<endl;
	ofs<<"HEADERS	+= demo1_func.h"<<endl;
	ofs<<""<<endl;
	ofs<<"SOURCES	= demo1_plugin.cpp"<<endl;
	ofs<<"SOURCES	+= demo1_func.cpp"<<endl;
	ofs<<"SOURCES	+= $$VAA3DPATH/v3d_main/basic_c_fun/v3d_message.cpp"<<endl;
	ofs<<""<<endl;
	ofs<<"TARGET	= $$qtLibraryTarget(demo1)"<<endl;
	ofs<<"DESTDIR	= $$VAA3DPATH/bin/plugins/demo1/"<<endl;
	ofs.close();

	filename = dir + "/demo1_func.cpp";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<"/* demo1_func.cpp"<<endl;
	ofs<<" * This is demo1."<<endl;
	ofs<<" * 2012-02-20 : by Hang Xiao"<<endl;
	ofs<<" */"<<endl;
	ofs<<""<<endl;
	ofs<<"#include <v3d_interface.h>"<<endl;
	ofs<<"#include \"v3d_message.h\""<<endl;
	ofs<<"#include \"demo1_func.h\""<<endl;
	ofs<<"#include <vector>"<<endl;
	ofs<<"#include <iostream>"<<endl;
	ofs<<"using namespace std;"<<endl;
	ofs<<""<<endl;
	ofs<<"const QString title = QObject::tr(\"Demo1 Plugin\");"<<endl;
	ofs<<""<<endl;
	ofs<<"int Load_Image(V3DPluginCallback2 &callback, QWidget *parent)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	v3dhandleList win_list = callback.getImageWindowList();"<<endl;
	ofs<<""<<endl;
	ofs<<"	if(win_list.size()<1)"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		QMessageBox::information(0, title, QObject::tr(\"No image is open.\"));"<<endl;
	ofs<<"		return -1;"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"	v3dhandle curwin = callback.currentImageWindow();"<<endl;
	ofs<<"	"<<endl;
	ofs<<"	Image4DSimple *p4DImage = callback.getImage(curwin);"<<endl;
	ofs<<"	V3DLONG sz[4];"<<endl;
	ofs<<"	sz[0] = p4DImage->getXDim();"<<endl;
	ofs<<"	sz[1] = p4DImage->getYDim();"<<endl;
	ofs<<"	sz[2] = p4DImage->getZDim();"<<endl;
	ofs<<"	sz[3] = p4DImage->getCDim();"<<endl;
	ofs<<"	ImagePixelType datatype = p4DImage->getDatatype();"<<endl;
	ofs<<""<<endl;
	ofs<<"	QMessageBox::information(0, title, QObject::tr(\"Image size : %1 x %2 x %3 x %4\").arg(sz[0]).arg(sz[1]).arg(sz[2]).arg(sz[3]));"<<endl;
	ofs<<""<<endl;
	ofs<<"	unsigned char * inimg1d = p4DImage->getRawData();"<<endl;
	ofs<<"	V3DLONG tol_sz = sz[0] * sz[1] * sz[2] * sz[3];"<<endl;
	ofs<<"	unsigned char * newimg1d = new unsigned char[tol_sz]; "<<endl;
	ofs<<"	for(V3DLONG i = 0; i < tol_sz; i++) newimg1d[i] = inimg1d[i];"<<endl;
	ofs<<""<<endl;
	ofs<<"	v3dhandle newwin = callback.newImageWindow();"<<endl;
	ofs<<""<<endl;
	ofs<<"	Image4DSimple * new4DImage = new Image4DSimple();"<<endl;
	ofs<<""<<endl;
	ofs<<"	new4DImage->setData(newimg1d, sz[0], sz[1], sz[2], sz[3], datatype);"<<endl;
	ofs<<"	callback.setImage(newwin, new4DImage);"<<endl;
	ofs<<"	callback.setImageName(newwin, QObject::tr(\"Image Copy\"));"<<endl;
	ofs<<"	//callback.updateImageWindow(newwin);"<<endl;
	ofs<<"	return 1;"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"bool Load_Image(const V3DPluginArgList & input, V3DPluginArgList & output)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	cout<<\"Welcome to Load_Image\"<<endl;"<<endl;
	ofs<<"	return true;"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"int Load_SWC(V3DPluginCallback2 &callback, QWidget *parent)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	v3dhandleList win_list = callback.getImageWindowList();"<<endl;
	ofs<<""<<endl;
	ofs<<"	if(win_list.size()<1)"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		QMessageBox::information(0, title, QObject::tr(\"No image is open.\"));"<<endl;
	ofs<<"		return -1;"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"	v3dhandle curwin = callback.currentImageWindow();"<<endl;
	ofs<<"	NeuronTree nt = callback.getSWC(curwin);"<<endl;
	ofs<<"	if(nt.listNeuron.empty()) {v3d_msg(QObject::tr(\"No swc loaded.\")); return 0;}"<<endl;
	ofs<<"	QMessageBox::information(0, title, QObject::tr(\"SWC node num : %1\").arg(nt.listNeuron.size()));"<<endl;
	ofs<<"	"<<endl;
	ofs<<"	// prepare image data for newwin"<<endl;
	ofs<<"	Image4DSimple *p4DImage = callback.getImage(curwin);"<<endl;
	ofs<<"	V3DLONG sz[4];"<<endl;
	ofs<<"	sz[0] = p4DImage->getXDim();"<<endl;
	ofs<<"	sz[1] = p4DImage->getYDim();"<<endl;
	ofs<<"	sz[2] = p4DImage->getZDim();"<<endl;
	ofs<<"	sz[3] = p4DImage->getCDim();"<<endl;
	ofs<<"	ImagePixelType datatype = p4DImage->getDatatype();"<<endl;
	ofs<<""<<endl;
	ofs<<"	unsigned char * inimg1d = p4DImage->getRawData();"<<endl;
	ofs<<"	V3DLONG tol_sz = sz[0] * sz[1] * sz[2] * sz[3];"<<endl;
	ofs<<"	unsigned char * newimg1d = new unsigned char[tol_sz]; "<<endl;
	ofs<<"	for(V3DLONG i = 0; i < tol_sz; i++) newimg1d[i] = inimg1d[i];"<<endl;
	ofs<<""<<endl;
	ofs<<"	v3dhandle newwin = callback.newImageWindow();"<<endl;
	ofs<<""<<endl;
	ofs<<"	Image4DSimple * new4DImage = new Image4DSimple();"<<endl;
	ofs<<""<<endl;
	ofs<<"	new4DImage->setData(newimg1d, sz[0], sz[1], sz[2], sz[3], datatype);"<<endl;
	ofs<<"	callback.setImage(newwin, new4DImage);"<<endl;
	ofs<<"	callback.setImageName(newwin, QObject::tr(\"SWC Copy\"));"<<endl;
	ofs<<"	callback.setSWC(newwin, nt);"<<endl;
	ofs<<"	//callback.updateImageWindow(newwin);"<<endl;
	ofs<<"	callback.open3DWindow(newwin);"<<endl;
	ofs<<"	callback.getView3DControl(newwin)->updateWithTriView(); // display swc"<<endl;
	ofs<<"	return 1;"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"bool Load_SWC(const V3DPluginArgList & input, V3DPluginArgList & output)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	cout<<\"Welcome to Load_SWC\"<<endl;"<<endl;
	ofs<<"	return true;"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"int Load_Marker(V3DPluginCallback2 &callback, QWidget *parent)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	v3dhandleList win_list = callback.getImageWindowList();"<<endl;
	ofs<<""<<endl;
	ofs<<"	if(win_list.size()<1)"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		QMessageBox::information(0, title, QObject::tr(\"No image is open.\"));"<<endl;
	ofs<<"		return -1;"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"	v3dhandle curwin = callback.currentImageWindow();"<<endl;
	ofs<<"	LandmarkList landmarks = callback.getLandmark(curwin);"<<endl;
	ofs<<"	if(landmarks.empty()) {v3d_msg(QObject::tr(\"No marker loaded.\")); return 0;}"<<endl;
	ofs<<"	QMessageBox::information(0, title, QObject::tr(\"landmark num : %1\").arg(landmarks.size()));"<<endl;
	ofs<<"	"<<endl;
	ofs<<"	// prepare image data for newwin"<<endl;
	ofs<<"	Image4DSimple *p4DImage = callback.getImage(curwin);"<<endl;
	ofs<<"	V3DLONG sz[4];"<<endl;
	ofs<<"	sz[0] = p4DImage->getXDim();"<<endl;
	ofs<<"	sz[1] = p4DImage->getYDim();"<<endl;
	ofs<<"	sz[2] = p4DImage->getZDim();"<<endl;
	ofs<<"	sz[3] = p4DImage->getCDim();"<<endl;
	ofs<<"	ImagePixelType datatype = p4DImage->getDatatype();"<<endl;
	ofs<<""<<endl;
	ofs<<"	unsigned char * inimg1d = p4DImage->getRawData();"<<endl;
	ofs<<"	V3DLONG tol_sz = sz[0] * sz[1] * sz[2] * sz[3];"<<endl;
	ofs<<"	unsigned char * newimg1d = new unsigned char[tol_sz]; "<<endl;
	ofs<<"	for(V3DLONG i = 0; i < tol_sz; i++) newimg1d[i] = inimg1d[i];"<<endl;
	ofs<<""<<endl;
	ofs<<"	v3dhandle newwin = callback.newImageWindow();"<<endl;
	ofs<<""<<endl;
	ofs<<"	Image4DSimple * new4DImage = new Image4DSimple();"<<endl;
	ofs<<""<<endl;
	ofs<<"	new4DImage->setData(newimg1d, sz[0], sz[1], sz[2], sz[3], datatype);"<<endl;
	ofs<<"	callback.setImage(newwin, new4DImage);"<<endl;
	ofs<<"	callback.setImageName(newwin, QObject::tr(\"Marker Copy\"));"<<endl;
	ofs<<"	callback.setLandmark(newwin, landmarks);"<<endl;
	ofs<<"	//callback.updateImageWindow(newwin);"<<endl;
	ofs<<"	callback.open3DWindow(newwin);"<<endl;
	ofs<<"	callback.getView3DControl(newwin)->updateWithTriView(); // display landmarks"<<endl;
	ofs<<"	return 1;"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"bool Load_Marker(const V3DPluginArgList & input, V3DPluginArgList & output)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	cout<<\"Welcome to Load_Marker\"<<endl;"<<endl;
	ofs<<"	return true;"<<endl;
	ofs<<"}"<<endl;
	ofs.close();

	filename = dir + "/demo1_func.h";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<"/* demo1_func.h"<<endl;
	ofs<<" * This is demo1."<<endl;
	ofs<<" * 2012-02-20 : by Hang Xiao"<<endl;
	ofs<<" */"<<endl;
	ofs<<" "<<endl;
	ofs<<"#ifndef __DEMO1_FUNC_H__"<<endl;
	ofs<<"#define __DEMO1_FUNC_H__"<<endl;
	ofs<<""<<endl;
	ofs<<"#include <v3d_interface.h>"<<endl;
	ofs<<""<<endl;
	ofs<<"int Load_Image(V3DPluginCallback2 &callback, QWidget *parent);"<<endl;
	ofs<<"bool Load_Image(const V3DPluginArgList & input, V3DPluginArgList & output);"<<endl;
	ofs<<"int Load_SWC(V3DPluginCallback2 &callback, QWidget *parent);"<<endl;
	ofs<<"bool Load_SWC(const V3DPluginArgList & input, V3DPluginArgList & output);"<<endl;
	ofs<<"int Load_Marker(V3DPluginCallback2 &callback, QWidget *parent);"<<endl;
	ofs<<"bool Load_Marker(const V3DPluginArgList & input, V3DPluginArgList & output);"<<endl;
	ofs<<""<<endl;
	ofs<<"#endif"<<endl;
	ofs<<""<<endl;
	ofs.close();

	filename = dir + "/demo1_plugin.cpp";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<"/* demo1_plugin.cpp"<<endl;
	ofs<<" * This is demo1."<<endl;
	ofs<<" * 2012-02-20 : by Hang Xiao"<<endl;
	ofs<<" */"<<endl;
	ofs<<" "<<endl;
	ofs<<"#include \"v3d_message.h\""<<endl;
	ofs<<""<<endl;
	ofs<<"#include \"demo1_plugin.h\""<<endl;
	ofs<<"#include \"demo1_func.h\""<<endl;
	ofs<<" "<<endl;
	ofs<<"Q_EXPORT_PLUGIN2(demo1, Demo1Plugin);"<<endl;
	ofs<<" "<<endl;
	ofs<<"QStringList Demo1Plugin::menulist() const"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	return QStringList() "<<endl;
	ofs<<"		<<tr(\"Load_Image\")"<<endl;
	ofs<<"		<<tr(\"Load_SWC\")"<<endl;
	ofs<<"		<<tr(\"Load_Marker\")"<<endl;
	ofs<<"		<<tr(\"about\");"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"QStringList Demo1Plugin::funclist() const"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	return QStringList()"<<endl;
	ofs<<"		<<tr(\"Load_Image\")"<<endl;
	ofs<<"		<<tr(\"Load_SWC\")"<<endl;
	ofs<<"		<<tr(\"Load_Marker\");"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"void Demo1Plugin::domenu(const QString &menu_name, V3DPluginCallback2 &callback, QWidget *parent)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	if (menu_name == tr(\"Load_Image\"))"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		Load_Image(callback,parent);"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"	else if (menu_name == tr(\"Load_SWC\"))"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		Load_SWC(callback,parent);"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"	else if (menu_name == tr(\"Load_Marker\"))"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		Load_Marker(callback,parent);"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"	else"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		v3d_msg(tr(\"This is demo1.. \""<<endl;
	ofs<<"			\"Developed by Hang Xiao, 2012-02-20\"));"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"bool Demo1Plugin::dofunc(const QString & func_name, const V3DPluginArgList & input, V3DPluginArgList & output, V3DPluginCallback2 & callback,  QWidget * parent)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	if (func_name == tr(\"Load_Image\"))"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		return Load_Image(input, output);"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"	else if (func_name == tr(\"Load_SWC\"))"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		return Load_SWC(input,output);"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"	else if (func_name == tr(\"Load_Marker\"))"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		return Load_Marker(input,output);"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs.close();

	filename = dir + "/demo1_plugin.h";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<"/* demo1_plugin.h"<<endl;
	ofs<<" * This is demo1."<<endl;
	ofs<<" * 2012-02-20 : by Hang Xiao"<<endl;
	ofs<<" */"<<endl;
	ofs<<" "<<endl;
	ofs<<"#ifndef __DEMO1_PLUGIN_H__"<<endl;
	ofs<<"#define __DEMO1_PLUGIN_H__"<<endl;
	ofs<<""<<endl;
	ofs<<"#include <QtGui>"<<endl;
	ofs<<"#include <v3d_interface.h>"<<endl;
	ofs<<""<<endl;
	ofs<<"class Demo1Plugin : public QObject, public V3DPluginInterface2_1"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	Q_OBJECT"<<endl;
	ofs<<"	Q_INTERFACES(V3DPluginInterface2_1);"<<endl;
	ofs<<""<<endl;
	ofs<<"public:"<<endl;
	ofs<<"	float getPluginVersion() const {return 1.1f;}"<<endl;
	ofs<<""<<endl;
	ofs<<"	QStringList menulist() const;"<<endl;
	ofs<<"	void domenu(const QString &menu_name, V3DPluginCallback2 &callback, QWidget *parent);"<<endl;
	ofs<<""<<endl;
	ofs<<"	QStringList funclist() const ;"<<endl;
	ofs<<"	bool dofunc(const QString &func_name, const V3DPluginArgList &input, V3DPluginArgList &output, V3DPluginCallback2 &callback, QWidget *parent);"<<endl;
	ofs<<"};"<<endl;
	ofs<<""<<endl;
	ofs<<"#endif"<<endl;
	ofs<<""<<endl;
	ofs.close();
}
